natural_newline = _{"␍␊" | "\r\n" | "\n"}
WHITESPACE = _{ " " | "\t" }

identifier = @{ "_"* ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_" )* }
register = @{ "reg" ~ ASCII_DIGIT+ }

sign = @{ "-" | "+" }
unsigned = @{ ASCII_DIGIT+ }
signed = @{ sign? ~ ASCII_DIGIT+ }
float = @{ signed ~ "." ~ unsigned }
string = @{ "\"" ~ (ASCII_ALPHANUMERIC | "\\" | " " )* ~ "\"" }

value = _{ float | unsigned | signed  | register }
literals = {float | unsigned | signed}

operation_type = { "u" | "s" | "f" }
size = {"0" | "2" | "3" }



label = { identifier ~ ":" }

move_ = {
    register ~ "=" ~ (register | (operation_type ~ literals))
}

equal = {
    register ~ "=" ~ register ~ "==" ~ value
}

not_equal = {
    register ~ "=" ~ register ~ "!=" ~ value
}

not = {
    register ~ "=" ~ "!" ~ value
}


and = {
    register ~ "=" ~ register ~ "&&" ~ value
}

or = {
    register ~ "=" ~ register ~ "||" ~ value
}

xor = {
    register ~ "=" ~ register ~ "^^" ~ value
}

shift_left = {
    register ~ "=" ~ register ~ "<<" ~ value
}

shift_right = {
    register ~ "=" ~ register ~ ">>" ~ value
}

jump = {
    "jmp" ~ identifier
}

jnz = {
    "jnz" ~ register ~ "," ~ identifier
}

push = {
    "push" ~ value
}

pop = {
    "pop" ~ register
}

call = {
    "call" ~ identifier
}

ret = {
    "ret"
}

syscall = {
//     "syscall" ~ (identifier | unsigned)
    "syscall"
}

store = {
    (unsigned | register) ~ "<-" ~ register ~ size
}

load = {
    register ~ "<-" ~ (unsigned | register) ~ size
}

add = {
    register ~ "=" ~ operation_type ~ register ~ "+" ~ value
}

sub = {
    register ~ "=" ~ operation_type ~ register ~ "-" ~ value
}

mul = {
    register ~ "=" ~ operation_type ~ register ~ "*" ~ value
}

div = {
    register ~ "=" ~ operation_type ~ register ~ "/" ~ value
}

mod_ = {
    register ~ "=" ~ operation_type ~ register ~ "%" ~ value
}

divmod = {
    register ~ "," ~ register ~ "=" ~ operation_type ~ register ~ "/%" ~ value
}

greater_than = {
    register ~ "=" ~ operation_type ~ register ~ ">" ~ value
}

less_than = {
    register ~ "=" ~ operation_type ~ register ~ "<" ~ value
}

greater_than_or_equal = {
    register ~ "=" ~ operation_type ~ register ~ ">=" ~ value
}

less_than_or_equal = {
    register ~ "=" ~ operation_type ~ register ~ "<=" ~ value
}

negate = {
    register ~ "=" ~ operation_type ~ "-" ~ value
}

string_store = {
    (unsigned) ~ "<-" ~ string
}




statement = _{
    natural_newline* ~ (
        move_ | equal | not_equal | not | and | or | xor | shift_left |
        shift_right | jump | jnz | push | pop | call | ret | syscall |
        store | load | add | sub | mul | div | mod_ | divmod | greater_than |
        less_than | greater_than_or_equal | less_than_or_equal | negate | label | string_store
    ) ~ natural_newline*
}



program = _{ SOI ~ statement* ~ EOI}